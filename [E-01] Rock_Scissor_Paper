{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "40f10537",
   "metadata": {},
   "source": [
    "# 가위바위보 분류기를 만들자"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76e2ce29",
   "metadata": {},
   "source": [
    "## 1. 필요한 라이브러리 불러오기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "43a51903",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PIL 라이브러리 import 완료!\n"
     ]
    }
   ],
   "source": [
    "from PIL import Image\n",
    "import os, glob\n",
    "\n",
    "print(\"PIL 라이브러리 import 완료!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b7863c1",
   "metadata": {},
   "source": [
    "## 2. 이미지 리사이징 하기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "012b2bc0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "def resize_images(img_path):\n",
    "    images=glob.glob(img_path + \"/*.jpg\")  \n",
    "    # 파일마다 모두 28x28 사이즈로 바꾸어 저장합니다.\n",
    "    target_size=(28,28)\n",
    "    for img in images:\n",
    "        old_img=Image.open(img)\n",
    "        new_img=old_img.resize(target_size,Image.ANTIALIAS)\n",
    "        new_img.save(img, \"JPEG\")\n",
    "    \n",
    "    print(len(images), img_path.split('/')[3] ,\" images resized.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c2e6c5e0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100 scissor  images resized.\n",
      "100 rock  images resized.\n",
      "100 paper  images resized.\n"
     ]
    }
   ],
   "source": [
    "# 각각 100개의 가위바위보 이미지 리사이징\n",
    "resize_images(\"./data/rock_scissor_paper/scissor\")\n",
    "resize_images(\"./data/rock_scissor_paper/rock\")\n",
    "resize_images(\"./data/rock_scissor_paper/paper\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1dac24b",
   "metadata": {},
   "source": [
    "## 3. 가위, 바위, 보 데이터를 읽을 수 있는 함수 만들기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b107780c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "학습데이터(x_train)의 이미지 개수는 300 입니다.\n",
      "x_train shape: (300, 28, 28, 3)\n",
      "y_train shape: (300,)\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "def load_data(img_path, number_of_data=300):  # 가위바위보 이미지 개수 총합에 주의하세요.\n",
    "    # 가위 : 0, 바위 : 1, 보 : 2\n",
    "    img_size=28\n",
    "    color=3\n",
    "    #이미지 데이터와 라벨(가위 : 0, 바위 : 1, 보 : 2) 데이터를 담을 행렬(matrix) 영역을 생성합니다.\n",
    "    imgs=np.zeros(number_of_data*img_size*img_size*color,dtype=np.int32).reshape(number_of_data,img_size,img_size,color)\n",
    "    labels=np.zeros(number_of_data,dtype=np.int32)\n",
    "\n",
    "    idx=0\n",
    "    for file in glob.iglob(img_path+'/scissor/*.jpg'):\n",
    "        img = np.array(Image.open(file),dtype=np.int32)\n",
    "        imgs[idx,:,:,:]=img    # 데이터 영역에 이미지 행렬을 복사\n",
    "        labels[idx]=0   # 가위 : 0\n",
    "        idx=idx+1\n",
    "\n",
    "    for file in glob.iglob(img_path+'/rock/*.jpg'):\n",
    "        img = np.array(Image.open(file),dtype=np.int32)\n",
    "        imgs[idx,:,:,:]=img    # 데이터 영역에 이미지 행렬을 복사\n",
    "        labels[idx]=1   # 바위 : 1\n",
    "        idx=idx+1  \n",
    "    \n",
    "    for file in glob.iglob(img_path+'/paper/*.jpg'):\n",
    "        img = np.array(Image.open(file),dtype=np.int32)\n",
    "        imgs[idx,:,:,:]=img    # 데이터 영역에 이미지 행렬을 복사\n",
    "        labels[idx]=2   # 보 : 2\n",
    "        idx=idx+1\n",
    "        \n",
    "    print(\"학습데이터(x_train)의 이미지 개수는\", idx,\"입니다.\")\n",
    "    return imgs, labels\n",
    "\n",
    "image_dir_path = \"./data/rock_scissor_paper\"\n",
    "(x_train, y_train)=load_data(image_dir_path)\n",
    "x_train_norm = x_train/255.0   # 입력은 0~1 사이의 값으로 정규화\n",
    "\n",
    "print(\"x_train shape: {}\".format(x_train.shape))\n",
    "print(\"y_train shape: {}\".format(y_train.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a73abc80",
   "metadata": {},
   "source": [
    "## 3) 딥러닝 네트워크 설계하기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6fdad960",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv2d (Conv2D)              (None, 26, 26, 16)        448       \n",
      "_________________________________________________________________\n",
      "max_pooling2d (MaxPooling2D) (None, 13, 13, 16)        0         \n",
      "_________________________________________________________________\n",
      "conv2d_1 (Conv2D)            (None, 11, 11, 32)        4640      \n",
      "_________________________________________________________________\n",
      "max_pooling2d_1 (MaxPooling2 (None, 5, 5, 32)          0         \n",
      "_________________________________________________________________\n",
      "flatten (Flatten)            (None, 800)               0         \n",
      "_________________________________________________________________\n",
      "dense (Dense)                (None, 100)               80100     \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 3)                 303       \n",
      "=================================================================\n",
      "Total params: 85,491\n",
      "Trainable params: 85,491\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "import numpy as np\n",
    "\n",
    "model=keras.models.Sequential()\n",
    "model.add(keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(28,28,3)))\n",
    "model.add(keras.layers.MaxPool2D(2,2))\n",
    "model.add(keras.layers.Conv2D(32, (3,3), activation='relu'))\n",
    "model.add(keras.layers.MaxPooling2D((2,2)))\n",
    "model.add(keras.layers.Flatten())\n",
    "model.add(keras.layers.Dense(100, activation='relu'))\n",
    "model.add(keras.layers.Dense(3, activation='softmax'))\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "915d5849",
   "metadata": {},
   "source": [
    "## 4) 딥러닝 네트워크 학습시키기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "39093e03",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "10/10 [==============================] - 0s 4ms/step - loss: 1.1263 - accuracy: 0.2933\n",
      "Epoch 2/20\n",
      "10/10 [==============================] - 0s 4ms/step - loss: 1.1024 - accuracy: 0.3367\n",
      "Epoch 3/20\n",
      "10/10 [==============================] - 0s 4ms/step - loss: 1.0968 - accuracy: 0.3733\n",
      "Epoch 4/20\n",
      "10/10 [==============================] - 0s 4ms/step - loss: 1.0888 - accuracy: 0.4833\n",
      "Epoch 5/20\n",
      "10/10 [==============================] - 0s 5ms/step - loss: 1.0829 - accuracy: 0.6233\n",
      "Epoch 6/20\n",
      "10/10 [==============================] - 0s 5ms/step - loss: 1.0743 - accuracy: 0.5833\n",
      "Epoch 7/20\n",
      "10/10 [==============================] - 0s 5ms/step - loss: 1.0587 - accuracy: 0.5267\n",
      "Epoch 8/20\n",
      "10/10 [==============================] - 0s 4ms/step - loss: 1.0327 - accuracy: 0.7533\n",
      "Epoch 9/20\n",
      "10/10 [==============================] - 0s 4ms/step - loss: 0.9949 - accuracy: 0.6900\n",
      "Epoch 10/20\n",
      "10/10 [==============================] - 0s 4ms/step - loss: 0.9327 - accuracy: 0.8233\n",
      "Epoch 11/20\n",
      "10/10 [==============================] - 0s 4ms/step - loss: 0.8505 - accuracy: 0.7833\n",
      "Epoch 12/20\n",
      "10/10 [==============================] - 0s 4ms/step - loss: 0.7599 - accuracy: 0.8200\n",
      "Epoch 13/20\n",
      "10/10 [==============================] - 0s 4ms/step - loss: 0.6578 - accuracy: 0.8500\n",
      "Epoch 14/20\n",
      "10/10 [==============================] - 0s 4ms/step - loss: 0.5809 - accuracy: 0.8633\n",
      "Epoch 15/20\n",
      "10/10 [==============================] - 0s 4ms/step - loss: 0.5685 - accuracy: 0.8000\n",
      "Epoch 16/20\n",
      "10/10 [==============================] - 0s 4ms/step - loss: 0.4811 - accuracy: 0.8500\n",
      "Epoch 17/20\n",
      "10/10 [==============================] - 0s 4ms/step - loss: 0.4329 - accuracy: 0.8700\n",
      "Epoch 18/20\n",
      "10/10 [==============================] - 0s 5ms/step - loss: 0.3970 - accuracy: 0.8667\n",
      "Epoch 19/20\n",
      "10/10 [==============================] - 0s 4ms/step - loss: 0.4208 - accuracy: 0.8433\n",
      "Epoch 20/20\n",
      "10/10 [==============================] - 0s 4ms/step - loss: 0.3387 - accuracy: 0.9133\n"
     ]
    }
   ],
   "source": [
    "x_train_reshaped=x_train_norm.reshape( -1, 28, 28, 3)  # 데이터갯수에 -1을 쓰면 reshape시 자동계산됩니다.\n",
    "\n",
    "model.compile(optimizer='adam',\n",
    "             loss='sparse_categorical_crossentropy',\n",
    "             metrics=['accuracy'])\n",
    "\n",
    "results = model.fit(x_train_reshaped, y_train, epochs=20)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88417e36",
   "metadata": {},
   "source": [
    "## 5) 모델 평가"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "37a4395f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100 test  images resized.\n",
      "100 test  images resized.\n",
      "100 test  images resized.\n",
      "학습데이터(x_train)의 이미지 개수는 300 입니다.\n"
     ]
    }
   ],
   "source": [
    "# x_test, y_test를 만들기\n",
    "image_dir_path = \"./data/rock_scissor_paper/test\"\n",
    "# test data도 train data와 마찬가지로 이미지 resizing \n",
    "# 각각 100개의 가위바위보 이미지 리사이징\n",
    "resize_images(\"./data/rock_scissor_paper/test/scissor\")\n",
    "resize_images(\"./data/rock_scissor_paper/test/rock\")\n",
    "resize_images(\"./data/rock_scissor_paper/test/paper\")\n",
    "\n",
    "(x_test, y_test) = load_data(image_dir_path)\n",
    "x_test_norm = x_test/255.0   # 입력은 0~1 사이의 값으로 정규화\n",
    "\n",
    "x_test_reshaped = x_test_norm.reshape( -1, 28, 28, 3)  # 데이터갯수에 -1을 쓰면 reshape시 자동계산됩니다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "77d375bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10/10 - 0s - loss: 3.0906 - accuracy: 0.3300\n",
      "test_loss: 3.090582847595215 \n",
      "test_accuracy: 0.33000001311302185\n"
     ]
    }
   ],
   "source": [
    "# 모델 시험\n",
    "test_loss, test_accuracy = model.evaluate(x_test_reshaped, y_test, verbose=2)\n",
    "print(\"test_loss: {} \".format(test_loss))\n",
    "print(\"test_accuracy: {}\".format(test_accuracy))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a459dd11",
   "metadata": {},
   "source": [
    "# 첫 번째 시도 피드백\n",
    "train accuracy는 87% 인데, test accuracy는 46% 입니다.    \n",
    "훈련 세트에서는 점수가 굉장히 좋은데 테스트 세트에서는 점수가 굉장히 낮습니다.   \n",
    "훈련세트에만 잘 맞는 모델은 나중에 새로운 샘플에 대한 예측을 만들 때 잘 동작하지 않을 것입니다.   \n",
    "데이터가 너무 적기 때문에 데이터의 개수를 늘려 다시 모델 평가"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34b3e85f",
   "metadata": {},
   "source": [
    "## 1) train, test 데이터 불러오기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "67d64ae7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100 second_trial  images resized.\n",
      "100 second_trial  images resized.\n",
      "100 second_trial  images resized.\n",
      "0번째 폴더 resize 완료\n",
      "\n",
      "100 second_trial  images resized.\n",
      "100 second_trial  images resized.\n",
      "100 second_trial  images resized.\n",
      "1번째 폴더 resize 완료\n",
      "\n",
      "100 second_trial  images resized.\n",
      "100 second_trial  images resized.\n",
      "100 second_trial  images resized.\n",
      "2번째 폴더 resize 완료\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# 폴더 내에 있는 모든 이미지 불러오기\n",
    "image_dir_path = \"./data/rock_scissor_paper/second_trial\"\n",
    "dir_list = ['0', '1', '2']\n",
    "\n",
    "for i in dir_list:\n",
    "    resize_images(image_dir_path + '/' + i + '/rock')\n",
    "    resize_images(image_dir_path + '/' + i + '/scissor')\n",
    "    resize_images(image_dir_path + '/' + i + '/paper')\n",
    "    print(f'{i}번째 폴더 resize 완료')\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8ca4a209",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "학습데이터(x_train)의 이미지 개수는 300 입니다.\n",
      "학습데이터(x_train)의 이미지 개수는 300 입니다.\n",
      "학습데이터(x_train)의 이미지 개수는 300 입니다.\n",
      "x_data shape: (900, 28, 28, 3)\n",
      "y_data shape: (900,)\n"
     ]
    }
   ],
   "source": [
    "image_dir_path = \"./data/rock_scissor_paper/second_trial/\"\n",
    "first = True\n",
    "for dir in dir_list:\n",
    "    if first == True:\n",
    "        (x_data, y_data) = load_data(image_dir_path + \"/{}\".format(dir))\n",
    "        first = False\n",
    "    else:\n",
    "        (x_data_temp, y_data_temp) = load_data(image_dir_path + \"/{}\".format(dir))\n",
    "        x_data = np.vstack((x_data, x_data_temp))     \n",
    "        y_data = np.hstack((y_data, y_data_temp))\n",
    "\n",
    "print(\"x_data shape: {}\".format(x_data.shape))\n",
    "print(\"y_data shape: {}\".format(y_data.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e16bd7a",
   "metadata": {},
   "source": [
    "## 2) 데이터 나누기"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3c7c497",
   "metadata": {},
   "source": [
    "900장의 사진을 8:2 비율로 train 데이터와 test 데이터로 나눕니다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "fa5263ff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(720, 28, 28, 3)\n",
      "(720,)\n",
      "(180, 28, 28, 3)\n",
      "(180,)\n"
     ]
    }
   ],
   "source": [
    "x_train, x_test, y_train, y_test = train_test_split(x_data, y_data, test_size = 0.2, random_state = 42)\n",
    "x_train_norm = x_train / 255.0\n",
    "x_test_norm = x_test / 255.0\n",
    "\n",
    "print(x_train.shape)\n",
    "print(y_train.shape)\n",
    "print(x_test.shape)\n",
    "print(y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "851e35f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 1.8943 - accuracy: 0.4333\n",
      "Epoch 2/20\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.7300 - accuracy: 0.7306\n",
      "Epoch 3/20\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.4135 - accuracy: 0.8639\n",
      "Epoch 4/20\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.2416 - accuracy: 0.9389\n",
      "Epoch 5/20\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.1831 - accuracy: 0.9403\n",
      "Epoch 6/20\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.1336 - accuracy: 0.9597\n",
      "Epoch 7/20\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.1176 - accuracy: 0.9625\n",
      "Epoch 8/20\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.1018 - accuracy: 0.9597\n",
      "Epoch 9/20\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0975 - accuracy: 0.9653\n",
      "Epoch 10/20\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0799 - accuracy: 0.9694\n",
      "Epoch 11/20\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0626 - accuracy: 0.9778\n",
      "Epoch 12/20\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0527 - accuracy: 0.9903\n",
      "Epoch 13/20\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0460 - accuracy: 0.9875\n",
      "Epoch 14/20\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0398 - accuracy: 0.9931\n",
      "Epoch 15/20\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0413 - accuracy: 0.9903\n",
      "Epoch 16/20\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0322 - accuracy: 0.9917\n",
      "Epoch 17/20\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0236 - accuracy: 0.9958\n",
      "Epoch 18/20\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0199 - accuracy: 0.9972\n",
      "Epoch 19/20\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0279 - accuracy: 0.9958\n",
      "Epoch 20/20\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0164 - accuracy: 0.9972\n"
     ]
    }
   ],
   "source": [
    "x_train_reshaped=x_train_norm.reshape( -1, 28, 28, 3)  # 데이터갯수에 -1을 쓰면 reshape시 자동계산됩니다.\n",
    "\n",
    "model.compile(optimizer='adam',\n",
    "             loss='sparse_categorical_crossentropy',\n",
    "             metrics=['accuracy'])\n",
    "\n",
    "results = model.fit(x_train_reshaped, y_train, epochs=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "8b61ef74",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6/6 - 0s - loss: 0.0270 - accuracy: 0.9889\n",
      "test_loss: 0.027009110897779465 \n",
      "test_accuracy: 0.9888888597488403\n"
     ]
    }
   ],
   "source": [
    "x_test_reshaped=x_test_norm.reshape( -1, 28, 28, 3)  # 데이터갯수에 -1을 쓰면 reshape시 자동계산됩니다.\n",
    "\n",
    "# 모델 시험\n",
    "test_loss, test_accuracy = model.evaluate(x_test_reshaped, y_test, verbose=2)\n",
    "print(\"test_loss: {} \".format(test_loss))\n",
    "print(\"test_accuracy: {}\".format(test_accuracy))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63ef0501",
   "metadata": {},
   "source": [
    "## 최종 결과"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f453bcea",
   "metadata": {},
   "source": [
    "train 데이터에서 99퍼센트, test 데이터에서 정확도 98퍼센트가 나왔습니다.\n",
    "데이터의 수를 약간 늘렸을 뿐인데 test 데이터에서의 정확도 역시 크게 상승했습니다.\n",
    "처음엔 데이터 수를 늘리지 않고 모델을 좀 더 복잡하게 설계해서 해봤으나 오히려 정확도가 떨어졌습니다.\n",
    "반면에 데이터 수를 늘리고 모델을 단순하게 설계 했을 때 정확도를 높일 수 있었습니다."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
